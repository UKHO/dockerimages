# vim:ts=4:sw=4:et:sts=4:ft=python
subinclude("///build_defs/pleasings//docker")
subinclude("//build_defs:sh")


def docker_images(dockerfiles:list, repo:str):
    targets = []

    for dockerfile in dockerfiles:

        directory = dirname(dockerfile)
        versions=[git_commit()[0:8]]

        version=glob([f"{directory}/version.sh"]
        if(terra.Length) {
            
        }

        if glob(f"{dirname(dockerfile)}/version.py"):
            versions= 

        if(directoryName conatins the word terraform)
        {
            //logic to discover terraform version
        }
        elsedirectory{
            // 
        }

        // You could put something in here.
        // If directory contains "terraform"
        // tfversion = terraform_Version (to be calculated in realtime)

        targets += [_docker_images(
            name = directory,
            srcs = glob([f"{directory}/**"]),
            image = directory,
            versions = ["latest"] + versions,
            dockerfile = dockerfile,
            repo = repo,
        )]

    return targets


def _docker_images(name:str, srcs:list, image:str, versions:list, dockerfile:str, repo:str):
    build_targets = [
        docker_image(
            name = f"{name}_{version}",
            srcs = srcs,
            image = image,
            version = version,
            dockerfile = dockerfile,
            repo = repo,
        )
        for version in versions
    ]

    _docker_lint(
        name = f"{name}_lint",
        dockerfile = dockerfile,
    )

    _readme_push(
        name = f"{name}_readme_push",
        image = image,
        repo = repo,
        readme = dirname(dockerfile) + "/README.md",
    )

    sh_group(
        name = f"{name}_push",
        deps = [f"{target}_push" for target in build_targets],
    )

    return sh_group(
        name = name,
        deps = build_targets,
    )



def _docker_lint(name:str, dockerfile:str):
    return gentest(
        name = name,
        # build time
        outs = [f"{name}.sh"],
        srcs = [dockerfile],
        cmd = "echo \"docker run --rm -i hadolint/hadolint < $SRC\" > $OUT",
        # runtime
        no_test_output = True,
        test_cmd = "$TEST",
        data = [dockerfile],
    )


def _readme_push(name: str, image:str, repo:str, readme: str):
    readme_target = filegroup(
        name = f"_{name}#readme",
        srcs = glob([readme]),
    )

    return sh_cmd(
        name = name,
        cmd = f"./$(out_location //tools/readme_push) {repo} {image} $(out_location {readme_target})",
        deps = ["//tools/readme_push", readme_target],
    )
